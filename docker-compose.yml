version: '3.8'

services:
  # FastAPI RAG Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: learner_graph_app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./learner_graph.db
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - AB_TEST_ENABLED=true
    volumes:
      - ./app:/app/app:ro
      - app_data:/app/data
      - app_logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - learner_graph_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`localhost`)"
      - "traefik.http.services.app.loadbalancer.server.port=8000"

  # Redis for caching and real-time data
  redis:
    image: redis:7.2-alpine
    container_name: learner_graph_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - learner_graph_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for production database (optional upgrade from SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: learner_graph_postgres
    environment:
      - POSTGRES_DB=learner_graph
      - POSTGRES_USER=learner_user
      - POSTGRES_PASSWORD=secure_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - learner_graph_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U learner_user -d learner_graph"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: learner_graph_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - learner_graph_network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: learner_graph_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - learner_graph_network

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: learner_graph_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - learner_graph_network

volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  learner_graph_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 