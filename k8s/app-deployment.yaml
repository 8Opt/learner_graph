apiVersion: apps/v1
kind: Deployment
metadata:
  name: learner-graph-app
  namespace: learner-graph
  labels:
    app: learner-graph-rag-system
    component: api
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: learner-graph-rag-system
      component: api
  template:
    metadata:
      labels:
        app: learner-graph-rag-system
        component: api
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: learner-graph-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: learner-graph-api
        image: learner-graph:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: learner-graph-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: learner-graph-config
              key: REDIS_URL
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: learner-graph-config
              key: LOG_LEVEL
        - name: AB_TEST_ENABLED
          valueFrom:
            configMapKeyRef:
              name: learner-graph-config
              key: AB_TEST_ENABLED
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: learner-graph-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1"
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: app-logs
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data-pvc
      - name: app-logs
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: learner-graph-service
  namespace: learner-graph
  labels:
    app: learner-graph-rag-system
    component: api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 443
    targetPort: 8000
    protocol: TCP
    name: https
  selector:
    app: learner-graph-rag-system
    component: api

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-data-pvc
  namespace: learner-graph
  labels:
    app: learner-graph-rag-system
    component: api
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: learner-graph-sa
  namespace: learner-graph
  labels:
    app: learner-graph-rag-system
    component: api

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: learner-graph-role
  namespace: learner-graph
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: learner-graph-role-binding
  namespace: learner-graph
subjects:
- kind: ServiceAccount
  name: learner-graph-sa
  namespace: learner-graph
roleRef:
  kind: Role
  name: learner-graph-role
  apiGroup: rbac.authorization.k8s.io 